%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.5
%% Version source: file
-module(ffs_featureflag_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type flag() ::
      #{name                    => unicode:chardata(), % = 1, optional
        description             => unicode:chardata(), % = 2, optional
        enabled                 => boolean() | 0 | 1, % = 3, optional
        created_at              => timestamp(),     % = 4, optional
        updated_at              => timestamp()      % = 5, optional
       }.

-type get_flag_request() ::
      #{name                    => unicode:chardata() % = 1, optional
       }.

-type get_flag_response() ::
      #{flag                    => flag()           % = 1, optional
       }.

-type create_flag_request() ::
      #{name                    => unicode:chardata(), % = 1, optional
        description             => unicode:chardata(), % = 2, optional
        enabled                 => boolean() | 0 | 1 % = 3, optional
       }.

-type create_flag_response() ::
      #{flag                    => flag()           % = 1, optional
       }.

-type update_flag_request() ::
      #{name                    => unicode:chardata(), % = 1, optional
        enabled                 => boolean() | 0 | 1 % = 2, optional
       }.

-type update_flag_response() ::
      #{
       }.

-type list_flags_request() ::
      #{
       }.

-type list_flags_response() ::
      #{flag                    => [flag()]         % = 1, repeated
       }.

-type delete_flag_request() ::
      #{name                    => unicode:chardata() % = 1, optional
       }.

-type delete_flag_response() ::
      #{
       }.

-type timestamp() ::
      #{seconds                 => integer(),       % = 1, optional, 64 bits
        nanos                   => integer()        % = 2, optional, 32 bits
       }.

-export_type(['flag'/0, 'get_flag_request'/0, 'get_flag_response'/0, 'create_flag_request'/0, 'create_flag_response'/0, 'update_flag_request'/0, 'update_flag_response'/0, 'list_flags_request'/0, 'list_flags_response'/0, 'delete_flag_request'/0, 'delete_flag_response'/0, 'timestamp'/0]).
-type '$msg_name'() :: flag | get_flag_request | get_flag_response | create_flag_request | create_flag_response | update_flag_request | update_flag_response | list_flags_request | list_flags_response | delete_flag_request | delete_flag_response | timestamp.
-type '$msg'() :: flag() | get_flag_request() | get_flag_response() | create_flag_request() | create_flag_response() | update_flag_request() | update_flag_response() | list_flags_request() | list_flags_response() | delete_flag_request() | delete_flag_response() | timestamp().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        flag -> encode_msg_flag(id(Msg, TrUserData), TrUserData);
        get_flag_request -> encode_msg_get_flag_request(id(Msg, TrUserData), TrUserData);
        get_flag_response -> encode_msg_get_flag_response(id(Msg, TrUserData), TrUserData);
        create_flag_request -> encode_msg_create_flag_request(id(Msg, TrUserData), TrUserData);
        create_flag_response -> encode_msg_create_flag_response(id(Msg, TrUserData), TrUserData);
        update_flag_request -> encode_msg_update_flag_request(id(Msg, TrUserData), TrUserData);
        update_flag_response -> encode_msg_update_flag_response(id(Msg, TrUserData), TrUserData);
        list_flags_request -> encode_msg_list_flags_request(id(Msg, TrUserData), TrUserData);
        list_flags_response -> encode_msg_list_flags_response(id(Msg, TrUserData), TrUserData);
        delete_flag_request -> encode_msg_delete_flag_request(id(Msg, TrUserData), TrUserData);
        delete_flag_response -> encode_msg_delete_flag_response(id(Msg, TrUserData), TrUserData);
        timestamp -> encode_msg_timestamp(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_flag(Msg, TrUserData) -> encode_msg_flag(Msg, <<>>, TrUserData).


encode_msg_flag(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{description := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{enabled := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= false -> B2;
                        true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{created_at := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= undefined -> B3;
                        true -> e_mfield_flag_created_at(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{updated_at := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= undefined -> B4;
                   true -> e_mfield_flag_updated_at(TrF5, <<B4/binary, 42>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_get_flag_request(Msg, TrUserData) -> encode_msg_get_flag_request(Msg, <<>>, TrUserData).


encode_msg_get_flag_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_get_flag_response(Msg, TrUserData) -> encode_msg_get_flag_response(Msg, <<>>, TrUserData).


encode_msg_get_flag_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{flag := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true -> e_mfield_get_flag_response_flag(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_create_flag_request(Msg, TrUserData) -> encode_msg_create_flag_request(Msg, <<>>, TrUserData).


encode_msg_create_flag_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{description := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{enabled := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= false -> B2;
                   true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_create_flag_response(Msg, TrUserData) -> encode_msg_create_flag_response(Msg, <<>>, TrUserData).


encode_msg_create_flag_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{flag := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true -> e_mfield_create_flag_response_flag(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_update_flag_request(Msg, TrUserData) -> encode_msg_update_flag_request(Msg, <<>>, TrUserData).


encode_msg_update_flag_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{enabled := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= false -> B1;
                   true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_update_flag_response(_Msg, _TrUserData) -> <<>>.

encode_msg_list_flags_request(_Msg, _TrUserData) -> <<>>.

encode_msg_list_flags_response(Msg, TrUserData) -> encode_msg_list_flags_response(Msg, <<>>, TrUserData).


encode_msg_list_flags_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{flag := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_list_flags_response_flag(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_delete_flag_request(Msg, TrUserData) -> encode_msg_delete_flag_request(Msg, <<>>, TrUserData).


encode_msg_delete_flag_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{name := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_delete_flag_response(_Msg, _TrUserData) -> <<>>.

encode_msg_timestamp(Msg, TrUserData) -> encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{seconds := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{nanos := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

e_mfield_flag_created_at(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_flag_updated_at(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_flag_response_flag(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_flag(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_create_flag_response_flag(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_flag(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_list_flags_response_flag(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_flag(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_flags_response_flag([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_flags_response_flag(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_list_flags_response_flag(Rest, Bin3, TrUserData);
e_field_list_flags_response_flag([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(flag, Bin, TrUserData) -> id(decode_msg_flag(Bin, TrUserData), TrUserData);
decode_msg_2_doit(get_flag_request, Bin, TrUserData) -> id(decode_msg_get_flag_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(get_flag_response, Bin, TrUserData) -> id(decode_msg_get_flag_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(create_flag_request, Bin, TrUserData) -> id(decode_msg_create_flag_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(create_flag_response, Bin, TrUserData) -> id(decode_msg_create_flag_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(update_flag_request, Bin, TrUserData) -> id(decode_msg_update_flag_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(update_flag_response, Bin, TrUserData) -> id(decode_msg_update_flag_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_flags_request, Bin, TrUserData) -> id(decode_msg_list_flags_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_flags_response, Bin, TrUserData) -> id(decode_msg_list_flags_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_flag_request, Bin, TrUserData) -> id(decode_msg_delete_flag_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(delete_flag_response, Bin, TrUserData) -> id(decode_msg_delete_flag_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) -> id(decode_msg_timestamp(Bin, TrUserData), TrUserData).



decode_msg_flag(Bin, TrUserData) -> dfp_read_field_def_flag(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_flag(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_flag_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_flag(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_flag_description(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_flag(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_flag_enabled(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_flag(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_flag_created_at(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_flag(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_flag_updated_at(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_flag(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{name => F@_1, description => F@_2, enabled => F@_3},
    S2 = if F@_4 == '$undef' -> S1;
            true -> S1#{created_at => F@_4}
         end,
    if F@_5 == '$undef' -> S2;
       true -> S2#{updated_at => F@_5}
    end;
dfp_read_field_def_flag(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_flag(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_flag(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_flag(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_flag(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_flag_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_flag_description(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_flag_enabled(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_flag_created_at(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_flag_updated_at(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_flag(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_flag(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_flag(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_flag(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_flag(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_flag(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{name => F@_1, description => F@_2, enabled => F@_3},
    S2 = if F@_4 == '$undef' -> S1;
            true -> S1#{created_at => F@_4}
         end,
    if F@_5 == '$undef' -> S2;
       true -> S2#{updated_at => F@_5}
    end.

d_field_flag_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_flag_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_flag_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_flag(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_flag_description(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_flag_description(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_flag_description(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_flag(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_flag_enabled(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_flag_enabled(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_flag_enabled(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_flag(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_flag_created_at(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_flag_created_at(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_flag_created_at(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_timestamp(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_flag(RestF,
                            0,
                            0,
                            F,
                            F@_1,
                            F@_2,
                            F@_3,
                            if Prev == '$undef' -> NewFValue;
                               true -> merge_msg_timestamp(Prev, NewFValue, TrUserData)
                            end,
                            F@_5,
                            TrUserData).

d_field_flag_updated_at(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_flag_updated_at(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_flag_updated_at(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_timestamp(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_flag(RestF,
                            0,
                            0,
                            F,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            if Prev == '$undef' -> NewFValue;
                               true -> merge_msg_timestamp(Prev, NewFValue, TrUserData)
                            end,
                            TrUserData).

skip_varint_flag(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_flag(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_flag(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_flag(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_flag(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_flag(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_flag(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_flag(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_flag(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_flag(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_flag(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_flag(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_flag(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_flag(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_get_flag_request(Bin, TrUserData) -> dfp_read_field_def_get_flag_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_get_flag_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_get_flag_request_name(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_get_flag_request(<<>>, 0, 0, _, F@_1, _) -> #{name => F@_1};
dfp_read_field_def_get_flag_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_get_flag_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_get_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_get_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_get_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_get_flag_request_name(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_get_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_get_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_get_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_get_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_get_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_get_flag_request(<<>>, 0, 0, _, F@_1, _) -> #{name => F@_1}.

d_field_get_flag_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_get_flag_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_get_flag_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_get_flag_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_get_flag_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_get_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_get_flag_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_get_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_get_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_get_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_flag_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_get_flag_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_flag_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_get_flag_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_get_flag_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_get_flag_response(Bin, TrUserData) -> dfp_read_field_def_get_flag_response(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_get_flag_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_get_flag_response_flag(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_get_flag_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{flag => F@_1}
    end;
dfp_read_field_def_get_flag_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_get_flag_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_get_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_get_flag_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_get_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_get_flag_response_flag(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_get_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_get_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_get_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_get_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_get_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_get_flag_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{flag => F@_1}
    end.

d_field_get_flag_response_flag(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_get_flag_response_flag(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_get_flag_response_flag(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_flag(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_get_flag_response(RestF,
                                         0,
                                         0,
                                         F,
                                         if Prev == '$undef' -> NewFValue;
                                            true -> merge_msg_flag(Prev, NewFValue, TrUserData)
                                         end,
                                         TrUserData).

skip_varint_get_flag_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_get_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_get_flag_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_get_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_get_flag_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_get_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_flag_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_get_flag_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_flag_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_get_flag_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_get_flag_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_get_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_create_flag_request(Bin, TrUserData) -> dfp_read_field_def_create_flag_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(false, TrUserData), TrUserData).

dfp_read_field_def_create_flag_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_create_flag_request_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_create_flag_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_create_flag_request_description(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_create_flag_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_create_flag_request_enabled(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_create_flag_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{name => F@_1, description => F@_2, enabled => F@_3};
dfp_read_field_def_create_flag_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_create_flag_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_create_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_create_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_create_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_create_flag_request_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_create_flag_request_description(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_create_flag_request_enabled(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_create_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_create_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_create_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_create_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_create_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_create_flag_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{name => F@_1, description => F@_2, enabled => F@_3}.

d_field_create_flag_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_create_flag_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_create_flag_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_create_flag_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_create_flag_request_description(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_create_flag_request_description(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_create_flag_request_description(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_create_flag_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_create_flag_request_enabled(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_create_flag_request_enabled(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_create_flag_request_enabled(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_create_flag_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_create_flag_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_create_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_create_flag_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_create_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_create_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_create_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_create_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_flag_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_create_flag_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_flag_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_create_flag_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_create_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_create_flag_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_create_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_create_flag_response(Bin, TrUserData) -> dfp_read_field_def_create_flag_response(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_create_flag_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_create_flag_response_flag(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_create_flag_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{flag => F@_1}
    end;
dfp_read_field_def_create_flag_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_create_flag_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_create_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_create_flag_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_create_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_create_flag_response_flag(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_create_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_create_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_create_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_create_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_create_flag_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_create_flag_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{flag => F@_1}
    end.

d_field_create_flag_response_flag(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_create_flag_response_flag(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_create_flag_response_flag(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_flag(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_create_flag_response(RestF,
                                            0,
                                            0,
                                            F,
                                            if Prev == '$undef' -> NewFValue;
                                               true -> merge_msg_flag(Prev, NewFValue, TrUserData)
                                            end,
                                            TrUserData).

skip_varint_create_flag_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_create_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_create_flag_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_create_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_create_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_create_flag_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_create_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_flag_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_create_flag_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_flag_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_create_flag_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_create_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_create_flag_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_create_flag_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_update_flag_request(Bin, TrUserData) -> dfp_read_field_def_update_flag_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(false, TrUserData), TrUserData).

dfp_read_field_def_update_flag_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_update_flag_request_name(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_update_flag_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_update_flag_request_enabled(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_update_flag_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{name => F@_1, enabled => F@_2};
dfp_read_field_def_update_flag_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_update_flag_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_update_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_update_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_update_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_update_flag_request_name(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_update_flag_request_enabled(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_update_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_update_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_update_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_update_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_update_flag_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_update_flag_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{name => F@_1, enabled => F@_2}.

d_field_update_flag_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_update_flag_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_update_flag_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_update_flag_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_update_flag_request_enabled(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_update_flag_request_enabled(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_update_flag_request_enabled(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_update_flag_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_update_flag_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_update_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_update_flag_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_update_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_update_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_update_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_update_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_update_flag_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_update_flag_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_update_flag_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_update_flag_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_update_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_update_flag_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_update_flag_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_update_flag_response(Bin, TrUserData) -> dfp_read_field_def_update_flag_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_update_flag_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_update_flag_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_update_flag_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_update_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_update_flag_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_update_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_update_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_update_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_update_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_update_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_update_flag_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_update_flag_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_update_flag_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_update_flag_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_update_flag_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_update_flag_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_update_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_update_flag_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_update_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_update_flag_response(Rest2, 0, 0, F, TrUserData).

skip_group_update_flag_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_update_flag_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_update_flag_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_update_flag_response(Rest, Z1, Z2, F, TrUserData).

skip_64_update_flag_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_update_flag_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_list_flags_request(Bin, TrUserData) -> dfp_read_field_def_list_flags_request(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_list_flags_request(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_list_flags_request(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_list_flags_request(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_list_flags_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_list_flags_request(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_list_flags_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_list_flags_request(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_list_flags_request(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_list_flags_request(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_list_flags_request(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_list_flags_request(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_list_flags_request(<<>>, 0, 0, _, _) -> #{}.

skip_varint_list_flags_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_list_flags_request(Rest, Z1, Z2, F, TrUserData);
skip_varint_list_flags_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_list_flags_request(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_list_flags_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_list_flags_request(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_list_flags_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_flags_request(Rest2, 0, 0, F, TrUserData).

skip_group_list_flags_request(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_flags_request(Rest, 0, Z2, FNum, TrUserData).

skip_32_list_flags_request(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_list_flags_request(Rest, Z1, Z2, F, TrUserData).

skip_64_list_flags_request(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_list_flags_request(Rest, Z1, Z2, F, TrUserData).

decode_msg_list_flags_response(Bin, TrUserData) -> dfp_read_field_def_list_flags_response(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_list_flags_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_list_flags_response_flag(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_list_flags_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{flag => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_flags_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_list_flags_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_list_flags_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_list_flags_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_list_flags_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_list_flags_response_flag(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_list_flags_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_list_flags_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_list_flags_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_list_flags_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_list_flags_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_list_flags_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{flag => lists_reverse(R1, TrUserData)}
    end.

d_field_list_flags_response_flag(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_list_flags_response_flag(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_list_flags_response_flag(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_flag(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_list_flags_response(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_list_flags_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_list_flags_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_list_flags_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_flags_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_list_flags_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_list_flags_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_list_flags_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_flags_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_list_flags_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_flags_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_list_flags_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_flags_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_list_flags_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_list_flags_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_delete_flag_request(Bin, TrUserData) -> dfp_read_field_def_delete_flag_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_delete_flag_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_delete_flag_request_name(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_delete_flag_request(<<>>, 0, 0, _, F@_1, _) -> #{name => F@_1};
dfp_read_field_def_delete_flag_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_delete_flag_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_delete_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_delete_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_delete_flag_request_name(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_delete_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_delete_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_delete_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_delete_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_delete_flag_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_delete_flag_request(<<>>, 0, 0, _, F@_1, _) -> #{name => F@_1}.

d_field_delete_flag_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_delete_flag_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_delete_flag_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_delete_flag_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_delete_flag_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_delete_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_delete_flag_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_delete_flag_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_delete_flag_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_delete_flag_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_flag_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_delete_flag_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_flag_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_delete_flag_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_delete_flag_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_delete_flag_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_delete_flag_response(Bin, TrUserData) -> dfp_read_field_def_delete_flag_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_delete_flag_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_delete_flag_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_delete_flag_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_delete_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_delete_flag_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_delete_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_delete_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_delete_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_delete_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_delete_flag_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_delete_flag_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_delete_flag_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_delete_flag_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_delete_flag_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_delete_flag_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_delete_flag_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_delete_flag_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_delete_flag_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_delete_flag_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_flag_response(Rest2, 0, 0, F, TrUserData).

skip_group_delete_flag_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_flag_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_delete_flag_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_delete_flag_response(Rest, Z1, Z2, F, TrUserData).

skip_64_delete_flag_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_delete_flag_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_timestamp(Bin, TrUserData) -> dfp_read_field_def_timestamp(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_timestamp_seconds(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_timestamp_nanos(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_timestamp(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_timestamp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_timestamp_seconds(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_timestamp_nanos(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_timestamp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_timestamp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_timestamp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_timestamp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_timestamp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_timestamp_seconds(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_timestamp_nanos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_timestamp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_timestamp(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        flag -> merge_msg_flag(Prev, New, TrUserData);
        get_flag_request -> merge_msg_get_flag_request(Prev, New, TrUserData);
        get_flag_response -> merge_msg_get_flag_response(Prev, New, TrUserData);
        create_flag_request -> merge_msg_create_flag_request(Prev, New, TrUserData);
        create_flag_response -> merge_msg_create_flag_response(Prev, New, TrUserData);
        update_flag_request -> merge_msg_update_flag_request(Prev, New, TrUserData);
        update_flag_response -> merge_msg_update_flag_response(Prev, New, TrUserData);
        list_flags_request -> merge_msg_list_flags_request(Prev, New, TrUserData);
        list_flags_response -> merge_msg_list_flags_response(Prev, New, TrUserData);
        delete_flag_request -> merge_msg_delete_flag_request(Prev, New, TrUserData);
        delete_flag_response -> merge_msg_delete_flag_response(Prev, New, TrUserData);
        timestamp -> merge_msg_timestamp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_flag/3}).
merge_msg_flag(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{description := NFdescription}} -> S2#{description => NFdescription};
             {#{description := PFdescription}, _} -> S2#{description => PFdescription};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{enabled := NFenabled}} -> S3#{enabled => NFenabled};
             {#{enabled := PFenabled}, _} -> S3#{enabled => PFenabled};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {#{created_at := PFcreated_at}, #{created_at := NFcreated_at}} -> S4#{created_at => merge_msg_timestamp(PFcreated_at, NFcreated_at, TrUserData)};
             {_, #{created_at := NFcreated_at}} -> S4#{created_at => NFcreated_at};
             {#{created_at := PFcreated_at}, _} -> S4#{created_at => PFcreated_at};
             {_, _} -> S4
         end,
    case {PMsg, NMsg} of
        {#{updated_at := PFupdated_at}, #{updated_at := NFupdated_at}} -> S5#{updated_at => merge_msg_timestamp(PFupdated_at, NFupdated_at, TrUserData)};
        {_, #{updated_at := NFupdated_at}} -> S5#{updated_at => NFupdated_at};
        {#{updated_at := PFupdated_at}, _} -> S5#{updated_at => PFupdated_at};
        {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_get_flag_request/3}).
merge_msg_get_flag_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_flag_response/3}).
merge_msg_get_flag_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{flag := PFflag}, #{flag := NFflag}} -> S1#{flag => merge_msg_flag(PFflag, NFflag, TrUserData)};
        {_, #{flag := NFflag}} -> S1#{flag => NFflag};
        {#{flag := PFflag}, _} -> S1#{flag => PFflag};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_create_flag_request/3}).
merge_msg_create_flag_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{description := NFdescription}} -> S2#{description => NFdescription};
             {#{description := PFdescription}, _} -> S2#{description => PFdescription};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{enabled := NFenabled}} -> S3#{enabled => NFenabled};
        {#{enabled := PFenabled}, _} -> S3#{enabled => PFenabled};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_create_flag_response/3}).
merge_msg_create_flag_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{flag := PFflag}, #{flag := NFflag}} -> S1#{flag => merge_msg_flag(PFflag, NFflag, TrUserData)};
        {_, #{flag := NFflag}} -> S1#{flag => NFflag};
        {#{flag := PFflag}, _} -> S1#{flag => PFflag};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_update_flag_request/3}).
merge_msg_update_flag_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{enabled := NFenabled}} -> S2#{enabled => NFenabled};
        {#{enabled := PFenabled}, _} -> S2#{enabled => PFenabled};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_update_flag_response/3}).
merge_msg_update_flag_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_list_flags_request/3}).
merge_msg_list_flags_request(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_list_flags_response/3}).
merge_msg_list_flags_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{flag := PFflag}, #{flag := NFflag}} -> S1#{flag => 'erlang_++'(PFflag, NFflag, TrUserData)};
        {_, #{flag := NFflag}} -> S1#{flag => NFflag};
        {#{flag := PFflag}, _} -> S1#{flag => PFflag};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_flag_request/3}).
merge_msg_delete_flag_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{name := NFname}} -> S1#{name => NFname};
        {#{name := PFname}, _} -> S1#{name => PFname};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_flag_response/3}).
merge_msg_delete_flag_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{seconds := NFseconds}} -> S1#{seconds => NFseconds};
             {#{seconds := PFseconds}, _} -> S1#{seconds => PFseconds};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
        {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
        _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        flag -> v_msg_flag(Msg, [MsgName], TrUserData);
        get_flag_request -> v_msg_get_flag_request(Msg, [MsgName], TrUserData);
        get_flag_response -> v_msg_get_flag_response(Msg, [MsgName], TrUserData);
        create_flag_request -> v_msg_create_flag_request(Msg, [MsgName], TrUserData);
        create_flag_response -> v_msg_create_flag_response(Msg, [MsgName], TrUserData);
        update_flag_request -> v_msg_update_flag_request(Msg, [MsgName], TrUserData);
        update_flag_response -> v_msg_update_flag_response(Msg, [MsgName], TrUserData);
        list_flags_request -> v_msg_list_flags_request(Msg, [MsgName], TrUserData);
        list_flags_response -> v_msg_list_flags_response(Msg, [MsgName], TrUserData);
        delete_flag_request -> v_msg_delete_flag_request(Msg, [MsgName], TrUserData);
        delete_flag_response -> v_msg_delete_flag_response(Msg, [MsgName], TrUserData);
        timestamp -> v_msg_timestamp(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_flag/3}).
-dialyzer({nowarn_function,v_msg_flag/3}).
v_msg_flag(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{description := F2} -> v_type_string(F2, [description | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{enabled := F3} -> v_type_bool(F3, [enabled | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{created_at := F4} -> v_msg_timestamp(F4, [created_at | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{updated_at := F5} -> v_msg_timestamp(F5, [updated_at | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (description) -> ok;
                      (enabled) -> ok;
                      (created_at) -> ok;
                      (updated_at) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_flag(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), flag}, M, Path);
v_msg_flag(X, Path, _TrUserData) -> mk_type_error({expected_msg, flag}, X, Path).

-compile({nowarn_unused_function,v_msg_get_flag_request/3}).
-dialyzer({nowarn_function,v_msg_get_flag_request/3}).
v_msg_get_flag_request(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_get_flag_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), get_flag_request}, M, Path);
v_msg_get_flag_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, get_flag_request}, X, Path).

-compile({nowarn_unused_function,v_msg_get_flag_response/3}).
-dialyzer({nowarn_function,v_msg_get_flag_response/3}).
v_msg_get_flag_response(#{} = M, Path, TrUserData) ->
    case M of
        #{flag := F1} -> v_msg_flag(F1, [flag | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (flag) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_get_flag_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), get_flag_response}, M, Path);
v_msg_get_flag_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, get_flag_response}, X, Path).

-compile({nowarn_unused_function,v_msg_create_flag_request/3}).
-dialyzer({nowarn_function,v_msg_create_flag_request/3}).
v_msg_create_flag_request(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{description := F2} -> v_type_string(F2, [description | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{enabled := F3} -> v_type_bool(F3, [enabled | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (description) -> ok;
                      (enabled) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_create_flag_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), create_flag_request}, M, Path);
v_msg_create_flag_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, create_flag_request}, X, Path).

-compile({nowarn_unused_function,v_msg_create_flag_response/3}).
-dialyzer({nowarn_function,v_msg_create_flag_response/3}).
v_msg_create_flag_response(#{} = M, Path, TrUserData) ->
    case M of
        #{flag := F1} -> v_msg_flag(F1, [flag | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (flag) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_create_flag_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), create_flag_response}, M, Path);
v_msg_create_flag_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, create_flag_response}, X, Path).

-compile({nowarn_unused_function,v_msg_update_flag_request/3}).
-dialyzer({nowarn_function,v_msg_update_flag_request/3}).
v_msg_update_flag_request(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{enabled := F2} -> v_type_bool(F2, [enabled | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (enabled) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_update_flag_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), update_flag_request}, M, Path);
v_msg_update_flag_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, update_flag_request}, X, Path).

-compile({nowarn_unused_function,v_msg_update_flag_response/3}).
-dialyzer({nowarn_function,v_msg_update_flag_response/3}).
v_msg_update_flag_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_update_flag_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), update_flag_response}, M, Path);
v_msg_update_flag_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, update_flag_response}, X, Path).

-compile({nowarn_unused_function,v_msg_list_flags_request/3}).
-dialyzer({nowarn_function,v_msg_list_flags_request/3}).
v_msg_list_flags_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_list_flags_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), list_flags_request}, M, Path);
v_msg_list_flags_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, list_flags_request}, X, Path).

-compile({nowarn_unused_function,v_msg_list_flags_response/3}).
-dialyzer({nowarn_function,v_msg_list_flags_response/3}).
v_msg_list_flags_response(#{} = M, Path, TrUserData) ->
    case M of
        #{flag := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_flag(Elem, [flag | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, flag}}, F1, [flag | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (flag) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_list_flags_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), list_flags_response}, M, Path);
v_msg_list_flags_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, list_flags_response}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_flag_request/3}).
-dialyzer({nowarn_function,v_msg_delete_flag_request/3}).
v_msg_delete_flag_request(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_delete_flag_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), delete_flag_request}, M, Path);
v_msg_delete_flag_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_flag_request}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_flag_response/3}).
-dialyzer({nowarn_function,v_msg_delete_flag_response/3}).
v_msg_delete_flag_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_delete_flag_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), delete_flag_response}, M, Path);
v_msg_delete_flag_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, delete_flag_response}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
        #{seconds := F1} -> v_type_int64(F1, [seconds | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{nanos := F2} -> v_type_int32(F2, [nanos | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
                      (nanos) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), timestamp}, M, Path);
v_msg_timestamp(X, Path, _TrUserData) -> mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, flag},
      [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => enabled, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []},
       #{name => created_at, fnum => 4, rnum => 5, type => {msg, timestamp}, occurrence => optional, opts => []},
       #{name => updated_at, fnum => 5, rnum => 6, type => {msg, timestamp}, occurrence => optional, opts => []}]},
     {{msg, get_flag_request}, [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, get_flag_response}, [#{name => flag, fnum => 1, rnum => 2, type => {msg, flag}, occurrence => optional, opts => []}]},
     {{msg, create_flag_request},
      [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => enabled, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []}]},
     {{msg, create_flag_response}, [#{name => flag, fnum => 1, rnum => 2, type => {msg, flag}, occurrence => optional, opts => []}]},
     {{msg, update_flag_request}, [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => enabled, fnum => 2, rnum => 3, type => bool, occurrence => optional, opts => []}]},
     {{msg, update_flag_response}, []},
     {{msg, list_flags_request}, []},
     {{msg, list_flags_response}, [#{name => flag, fnum => 1, rnum => 2, type => {msg, flag}, occurrence => repeated, opts => []}]},
     {{msg, delete_flag_request}, [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, delete_flag_response}, []},
     {{msg, timestamp}, [#{name => seconds, fnum => 1, rnum => 2, type => int64, occurrence => optional, opts => []}, #{name => nanos, fnum => 2, rnum => 3, type => int32, occurrence => optional, opts => []}]}].


get_msg_names() -> [flag, get_flag_request, get_flag_response, create_flag_request, create_flag_response, update_flag_request, update_flag_response, list_flags_request, list_flags_response, delete_flag_request, delete_flag_response, timestamp].


get_group_names() -> [].


get_msg_or_group_names() ->
    [flag, get_flag_request, get_flag_response, create_flag_request, create_flag_response, update_flag_request, update_flag_response, list_flags_request, list_flags_response, delete_flag_request, delete_flag_response, timestamp].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(flag) ->
    [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => enabled, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []},
     #{name => created_at, fnum => 4, rnum => 5, type => {msg, timestamp}, occurrence => optional, opts => []},
     #{name => updated_at, fnum => 5, rnum => 6, type => {msg, timestamp}, occurrence => optional, opts => []}];
find_msg_def(get_flag_request) -> [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(get_flag_response) -> [#{name => flag, fnum => 1, rnum => 2, type => {msg, flag}, occurrence => optional, opts => []}];
find_msg_def(create_flag_request) ->
    [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => enabled, fnum => 3, rnum => 4, type => bool, occurrence => optional, opts => []}];
find_msg_def(create_flag_response) -> [#{name => flag, fnum => 1, rnum => 2, type => {msg, flag}, occurrence => optional, opts => []}];
find_msg_def(update_flag_request) -> [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => enabled, fnum => 2, rnum => 3, type => bool, occurrence => optional, opts => []}];
find_msg_def(update_flag_response) -> [];
find_msg_def(list_flags_request) -> [];
find_msg_def(list_flags_response) -> [#{name => flag, fnum => 1, rnum => 2, type => {msg, flag}, occurrence => repeated, opts => []}];
find_msg_def(delete_flag_request) -> [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(delete_flag_response) -> [];
find_msg_def(timestamp) -> [#{name => seconds, fnum => 1, rnum => 2, type => int64, occurrence => optional, opts => []}, #{name => nanos, fnum => 2, rnum => 3, type => int32, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['FeatureFlagService'].


get_service_def('FeatureFlagService') ->
    {{service, 'FeatureFlagService'},
     [#{name => 'GetFlag', input => get_flag_request, output => get_flag_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'CreateFlag', input => create_flag_request, output => create_flag_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'UpdateFlag', input => update_flag_request, output => update_flag_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'ListFlags', input => list_flags_request, output => list_flags_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'DeleteFlag', input => delete_flag_request, output => delete_flag_response, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('FeatureFlagService') -> ['GetFlag', 'CreateFlag', 'UpdateFlag', 'ListFlags', 'DeleteFlag'];
get_rpc_names(_) -> error.


find_rpc_def('FeatureFlagService', RpcName) -> find_rpc_def_FeatureFlagService(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_FeatureFlagService('GetFlag') -> #{name => 'GetFlag', input => get_flag_request, output => get_flag_response, input_stream => false, output_stream => false, opts => []};
find_rpc_def_FeatureFlagService('CreateFlag') -> #{name => 'CreateFlag', input => create_flag_request, output => create_flag_response, input_stream => false, output_stream => false, opts => []};
find_rpc_def_FeatureFlagService('UpdateFlag') -> #{name => 'UpdateFlag', input => update_flag_request, output => update_flag_response, input_stream => false, output_stream => false, opts => []};
find_rpc_def_FeatureFlagService('ListFlags') -> #{name => 'ListFlags', input => list_flags_request, output => list_flags_response, input_stream => false, output_stream => false, opts => []};
find_rpc_def_FeatureFlagService('DeleteFlag') -> #{name => 'DeleteFlag', input => delete_flag_request, output => delete_flag_response, input_stream => false, output_stream => false, opts => []};
find_rpc_def_FeatureFlagService(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"FeatureFlagService">>) -> 'FeatureFlagService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('FeatureFlagService') -> <<"FeatureFlagService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"FeatureFlagService">>, <<"GetFlag">>) -> {'FeatureFlagService', 'GetFlag'};
fqbins_to_service_and_rpc_name(<<"FeatureFlagService">>, <<"CreateFlag">>) -> {'FeatureFlagService', 'CreateFlag'};
fqbins_to_service_and_rpc_name(<<"FeatureFlagService">>, <<"UpdateFlag">>) -> {'FeatureFlagService', 'UpdateFlag'};
fqbins_to_service_and_rpc_name(<<"FeatureFlagService">>, <<"ListFlags">>) -> {'FeatureFlagService', 'ListFlags'};
fqbins_to_service_and_rpc_name(<<"FeatureFlagService">>, <<"DeleteFlag">>) -> {'FeatureFlagService', 'DeleteFlag'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('FeatureFlagService', 'GetFlag') -> {<<"FeatureFlagService">>, <<"GetFlag">>};
service_and_rpc_name_to_fqbins('FeatureFlagService', 'CreateFlag') -> {<<"FeatureFlagService">>, <<"CreateFlag">>};
service_and_rpc_name_to_fqbins('FeatureFlagService', 'UpdateFlag') -> {<<"FeatureFlagService">>, <<"UpdateFlag">>};
service_and_rpc_name_to_fqbins('FeatureFlagService', 'ListFlags') -> {<<"FeatureFlagService">>, <<"ListFlags">>};
service_and_rpc_name_to_fqbins('FeatureFlagService', 'DeleteFlag') -> {<<"FeatureFlagService">>, <<"DeleteFlag">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"Flag">>) -> flag;
fqbin_to_msg_name(<<"GetFlagRequest">>) -> get_flag_request;
fqbin_to_msg_name(<<"GetFlagResponse">>) -> get_flag_response;
fqbin_to_msg_name(<<"CreateFlagRequest">>) -> create_flag_request;
fqbin_to_msg_name(<<"CreateFlagResponse">>) -> create_flag_response;
fqbin_to_msg_name(<<"UpdateFlagRequest">>) -> update_flag_request;
fqbin_to_msg_name(<<"UpdateFlagResponse">>) -> update_flag_response;
fqbin_to_msg_name(<<"ListFlagsRequest">>) -> list_flags_request;
fqbin_to_msg_name(<<"ListFlagsResponse">>) -> list_flags_response;
fqbin_to_msg_name(<<"DeleteFlagRequest">>) -> delete_flag_request;
fqbin_to_msg_name(<<"DeleteFlagResponse">>) -> delete_flag_response;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(flag) -> <<"Flag">>;
msg_name_to_fqbin(get_flag_request) -> <<"GetFlagRequest">>;
msg_name_to_fqbin(get_flag_response) -> <<"GetFlagResponse">>;
msg_name_to_fqbin(create_flag_request) -> <<"CreateFlagRequest">>;
msg_name_to_fqbin(create_flag_response) -> <<"CreateFlagResponse">>;
msg_name_to_fqbin(update_flag_request) -> <<"UpdateFlagRequest">>;
msg_name_to_fqbin(update_flag_response) -> <<"UpdateFlagResponse">>;
msg_name_to_fqbin(list_flags_request) -> <<"ListFlagsRequest">>;
msg_name_to_fqbin(list_flags_response) -> <<"ListFlagsResponse">>;
msg_name_to_fqbin(delete_flag_request) -> <<"DeleteFlagRequest">>;
msg_name_to_fqbin(delete_flag_response) -> <<"DeleteFlagResponse">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'google.protobuf'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "featureflag.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["featureflag.proto", "timestamp.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["featureflag", "timestamp"].


get_msg_containment("featureflag") ->
    [create_flag_request, create_flag_response, delete_flag_request, delete_flag_response, flag, get_flag_request, get_flag_response, list_flags_request, list_flags_response, update_flag_request, update_flag_response];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("featureflag") -> undefined;
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("featureflag") -> ['FeatureFlagService'];
get_service_containment("timestamp") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("featureflag") -> [{'FeatureFlagService', 'GetFlag'}, {'FeatureFlagService', 'CreateFlag'}, {'FeatureFlagService', 'UpdateFlag'}, {'FeatureFlagService', 'ListFlags'}, {'FeatureFlagService', 'DeleteFlag'}];
get_rpc_containment("timestamp") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("featureflag") -> [];
get_enum_containment("timestamp") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"UpdateFlagRequest">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"ListFlagsRequest">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"GetFlagRequest">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"DeleteFlagRequest">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"CreateFlagRequest">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"UpdateFlagResponse">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"ListFlagsResponse">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"GetFlagResponse">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"DeleteFlagResponse">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"CreateFlagResponse">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(<<"Flag">>) -> "featureflag";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"FeatureFlagService">>) -> "featureflag";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) -> ["timestamp"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).


descriptor() ->
    <<10, 231, 6, 10, 17, 102, 101, 97, 116, 117, 114, 101, 102, 108, 97, 103, 46, 112, 114, 111, 116, 111, 34, 71, 10, 17, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1,
      40, 9, 18, 19, 10, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 24, 2, 32, 1, 40, 9, 18, 15, 10, 7, 101, 110, 97, 98, 108, 101, 100, 24, 3, 32, 1, 40, 8, 34, 41, 10, 18, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112,
      111, 110, 115, 101, 18, 19, 10, 4, 102, 108, 97, 103, 24, 1, 32, 1, 40, 11, 50, 5, 46, 70, 108, 97, 103, 34, 33, 10, 17, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1,
      40, 9, 34, 20, 10, 18, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101, 34, 154, 1, 10, 4, 70, 108, 97, 103, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18, 19, 10, 11, 100, 101, 115, 99, 114, 105, 112,
      116, 105, 111, 110, 24, 2, 32, 1, 40, 9, 18, 15, 10, 7, 101, 110, 97, 98, 108, 101, 100, 24, 3, 32, 1, 40, 8, 18, 46, 10, 10, 99, 114, 101, 97, 116, 101, 100, 95, 97, 116, 24, 4, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114,
      111, 116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18, 46, 10, 10, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 24, 5, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46,
      84, 105, 109, 101, 115, 116, 97, 109, 112, 34, 30, 10, 14, 71, 101, 116, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 34, 38, 10, 15, 71, 101, 116, 70, 108, 97, 103, 82, 101, 115, 112,
      111, 110, 115, 101, 18, 19, 10, 4, 102, 108, 97, 103, 24, 1, 32, 1, 40, 11, 50, 5, 46, 70, 108, 97, 103, 34, 18, 10, 16, 76, 105, 115, 116, 70, 108, 97, 103, 115, 82, 101, 113, 117, 101, 115, 116, 34, 40, 10, 17, 76, 105, 115, 116, 70, 108, 97, 103,
      115, 82, 101, 115, 112, 111, 110, 115, 101, 18, 19, 10, 4, 102, 108, 97, 103, 24, 1, 32, 3, 40, 11, 50, 5, 46, 70, 108, 97, 103, 34, 50, 10, 17, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97,
      109, 101, 24, 1, 32, 1, 40, 9, 18, 15, 10, 7, 101, 110, 97, 98, 108, 101, 100, 24, 2, 32, 1, 40, 8, 34, 20, 10, 18, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101, 50, 175, 2, 10, 18, 70, 101, 97, 116, 117, 114,
      101, 70, 108, 97, 103, 83, 101, 114, 118, 105, 99, 101, 18, 48, 10, 7, 71, 101, 116, 70, 108, 97, 103, 18, 15, 46, 71, 101, 116, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 16, 46, 71, 101, 116, 70, 108, 97, 103, 82, 101, 115, 112, 111,
      110, 115, 101, 40, 0, 48, 0, 18, 57, 10, 10, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 18, 18, 46, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 19, 46, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101,
      115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 57, 10, 10, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 18, 18, 46, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 19, 46, 85, 112, 100, 97, 116, 101, 70, 108, 97,
      103, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 54, 10, 9, 76, 105, 115, 116, 70, 108, 97, 103, 115, 18, 17, 46, 76, 105, 115, 116, 70, 108, 97, 103, 115, 82, 101, 113, 117, 101, 115, 116, 26, 18, 46, 76, 105, 115, 116, 70, 108, 97,
      103, 115, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 57, 10, 10, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 18, 18, 46, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 19, 46, 68, 101, 108, 101,
      116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 98, 6, 112, 114, 111, 116, 111, 51, 10, 103, 10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 116, 105, 109, 101, 115, 116, 97, 109,
      112, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101, 99, 111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13,
      10, 5, 110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112, 114, 111, 116, 111, 51>>.

descriptor("featureflag") ->
    <<10, 17, 102, 101, 97, 116, 117, 114, 101, 102, 108, 97, 103, 46, 112, 114, 111, 116, 111, 34, 71, 10, 17, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18, 19,
      10, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 24, 2, 32, 1, 40, 9, 18, 15, 10, 7, 101, 110, 97, 98, 108, 101, 100, 24, 3, 32, 1, 40, 8, 34, 41, 10, 18, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115,
      101, 18, 19, 10, 4, 102, 108, 97, 103, 24, 1, 32, 1, 40, 11, 50, 5, 46, 70, 108, 97, 103, 34, 33, 10, 17, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 34, 20,
      10, 18, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101, 34, 154, 1, 10, 4, 70, 108, 97, 103, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 18, 19, 10, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111,
      110, 24, 2, 32, 1, 40, 9, 18, 15, 10, 7, 101, 110, 97, 98, 108, 101, 100, 24, 3, 32, 1, 40, 8, 18, 46, 10, 10, 99, 114, 101, 97, 116, 101, 100, 95, 97, 116, 24, 4, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18, 46, 10, 10, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 24, 5, 32, 1, 40, 11, 50, 26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 84, 105, 109,
      101, 115, 116, 97, 109, 112, 34, 30, 10, 14, 71, 101, 116, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24, 1, 32, 1, 40, 9, 34, 38, 10, 15, 71, 101, 116, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115,
      101, 18, 19, 10, 4, 102, 108, 97, 103, 24, 1, 32, 1, 40, 11, 50, 5, 46, 70, 108, 97, 103, 34, 18, 10, 16, 76, 105, 115, 116, 70, 108, 97, 103, 115, 82, 101, 113, 117, 101, 115, 116, 34, 40, 10, 17, 76, 105, 115, 116, 70, 108, 97, 103, 115, 82, 101,
      115, 112, 111, 110, 115, 101, 18, 19, 10, 4, 102, 108, 97, 103, 24, 1, 32, 3, 40, 11, 50, 5, 46, 70, 108, 97, 103, 34, 50, 10, 17, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 18, 12, 10, 4, 110, 97, 109, 101, 24,
      1, 32, 1, 40, 9, 18, 15, 10, 7, 101, 110, 97, 98, 108, 101, 100, 24, 2, 32, 1, 40, 8, 34, 20, 10, 18, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101, 50, 175, 2, 10, 18, 70, 101, 97, 116, 117, 114, 101, 70, 108,
      97, 103, 83, 101, 114, 118, 105, 99, 101, 18, 48, 10, 7, 71, 101, 116, 70, 108, 97, 103, 18, 15, 46, 71, 101, 116, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 16, 46, 71, 101, 116, 70, 108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101,
      40, 0, 48, 0, 18, 57, 10, 10, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 18, 18, 46, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 19, 46, 67, 114, 101, 97, 116, 101, 70, 108, 97, 103, 82, 101, 115, 112, 111,
      110, 115, 101, 40, 0, 48, 0, 18, 57, 10, 10, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 18, 18, 46, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 19, 46, 85, 112, 100, 97, 116, 101, 70, 108, 97, 103, 82, 101,
      115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 54, 10, 9, 76, 105, 115, 116, 70, 108, 97, 103, 115, 18, 17, 46, 76, 105, 115, 116, 70, 108, 97, 103, 115, 82, 101, 113, 117, 101, 115, 116, 26, 18, 46, 76, 105, 115, 116, 70, 108, 97, 103, 115, 82,
      101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 18, 57, 10, 10, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 18, 18, 46, 68, 101, 108, 101, 116, 101, 70, 108, 97, 103, 82, 101, 113, 117, 101, 115, 116, 26, 19, 46, 68, 101, 108, 101, 116, 101, 70,
      108, 97, 103, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor("timestamp") ->
    <<10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47, 116, 105, 109, 101, 115, 116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 34, 43,
      10, 9, 84, 105, 109, 101, 115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101, 99, 111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5, 110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor(X) -> error({gpb_error, {badname, X}}).


gpb_version_as_string() ->
    "4.19.5".

gpb_version_as_list() ->
    [4,19,5].

gpb_version_source() ->
    "file".
